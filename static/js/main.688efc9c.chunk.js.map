{"version":3,"sources":["Form.js","ItemsList.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","content","handleChange","e","value","target","console","log","setState","handleSubmit","preventDefault","props","addItems","onSubmit","this","placeholder","type","onChange","className","React","Component","ItemsList","stuff","deleteItems","itemsList","length","map","item","key","id","onClick","App","items","filter","Math","random","newListItem","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQA8CeA,E,2MA3CbC,MAAQ,CACNC,QAAS,I,EAGXC,aAAe,SAAAC,GACb,IAAMC,EAAQD,EAAEE,OAAOD,MACvBE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CACZP,QAASG,K,EAIbK,aAAe,SAAAN,GACbA,EAAEO,iBACF,EAAKC,MAAMC,SAAS,EAAKZ,OACzB,EAAKQ,SAAS,CACZP,QAAS,M,wEAKX,OACE,6BACE,0BAAMY,SAAUC,KAAKL,cACnB,2BACEM,YAAY,iBACZC,KAAK,OACLC,SAAUH,KAAKZ,aACfE,MAAOU,KAAKd,MAAMC,UAEpB,4BACEiB,UAAU,+BACVL,SAAUC,KAAKL,cAEf,uBAAGS,UAAU,wBAAb,QAJF,gB,GA/BSC,IAAMC,WCwBVC,EAxBG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACpBC,EAAYF,EAAMG,OACtBH,EAAMI,KAAI,SAAAC,GACR,OACE,yBAAKT,UAAU,yBAAyBU,IAAKD,EAAKE,IAChD,0BAAMX,UAAU,cAAcS,EAAK1B,SACnC,4BACEiB,UAAU,qCACVY,QAAS,WACPP,EAAYI,EAAKE,MAHrB,YAYN,uBAAGX,UAAU,mBAAb,2BAGF,OAAO,yBAAKA,UAAU,cAAcM,ICevBO,G,iNAhCb/B,MAAQ,CACNgC,MAAO,CAAC,CAAEH,GAAI,EAAG5B,QAAS,uB,EAG5BsB,YAAc,SAAAS,GACZ,IAAMT,EAAc,EAAKvB,MAAMgC,MAAMC,QAAO,SAAAN,GAC1C,OAAOA,EAAKE,KAAOG,KAErB,EAAKxB,SAAS,CACZwB,MAAOT,K,EAIXX,SAAW,SAAAe,GACTA,EAAKE,GAAKK,KAAKC,SACf,IAAIC,EAAW,sBAAO,EAAKpC,MAAMgC,OAAlB,CAAyBL,IACxC,EAAKnB,SAAS,CACZwB,MAAOI,K,wEAKT,OACE,yBAAKlB,UAAU,yBACb,wBAAIA,UAAU,oBAAd,qCACA,kBAAC,EAAD,CAAWI,MAAOR,KAAKd,MAAMgC,MAAOT,YAAaT,KAAKS,cACtD,kBAAC,EAAD,CAAMX,SAAUE,KAAKF,gB,GA3BXO,IAAMC,YCOJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAOC,SAASC,eAAe,QAErCC,IAASC,OAAO,kBAAC,EAAD,MAASJ,GDyHnB,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.688efc9c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n  state = {\r\n    content: \"\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    const value = e.target.value;\r\n    console.log(value);\r\n    this.setState({\r\n      content: value\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addItems(this.state);\r\n    this.setState({\r\n      content: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            placeholder=\"Add some stuff\"\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={this.state.content}\r\n          ></input>\r\n          <button\r\n            className=\"btn waves-effect waves-light\"\r\n            onSubmit={this.handleSubmit}\r\n          >\r\n            <i className=\"material-icons right\">send</i>\r\n            Submit\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst ItemsList = ({ stuff, deleteItems }) => {\r\n  const itemsList = stuff.length ? (\r\n    stuff.map(item => {\r\n      return (\r\n        <div className=\"Active collection-item\" key={item.id}>\r\n          <span className=\"green-text\">{item.content}</span>\r\n          <button\r\n            className=\"waves-effect waves-light btn right\"\r\n            onClick={() => {\r\n              deleteItems(item.id);\r\n            }}\r\n          >\r\n            Done\r\n          </button>\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <p className=\"red-text center\"> You have no item list </p>\r\n  );\r\n\r\n  return <div className=\"collection\">{itemsList}</div>;\r\n};\r\n\r\nexport default ItemsList;\r\n","import React from \"react\";\nimport Form from \"./Form\";\nimport ItemsList from \"./ItemsList\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  state = {\n    items: [{ id: 1, content: \"Training React.js\" }]\n  };\n\n  deleteItems = items => {\n    const deleteItems = this.state.items.filter(item => {\n      return item.id !== items;\n    });\n    this.setState({\n      items: deleteItems\n    });\n  };\n\n  addItems = item => {\n    item.id = Math.random();\n    let newListItem = [...this.state.items, item];\n    this.setState({\n      items: newListItem\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container card center\">\n        <h1 className=\"center blue-text\">Lets get ready to rumble ... !!! </h1>\n        <ItemsList stuff={this.state.items} deleteItems={this.deleteItems} />\n        <Form addItems={this.addItems} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst root = document.getElementById(\"root\");\n\nReactDOM.render(<App />, root);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}